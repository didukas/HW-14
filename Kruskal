class DisjointSet:
    def __init__(self, vertices):
        self.parent = {v: v for v in vertices}
        self.rank = {v: 0 for v in vertices}

    def find(self, item):
        if self.parent[item] != item:
            self.parent[item] = self.find(self.parent[item])
        return self.parent[item]

    def union(self, x, y):
        xroot = self.find(x)
        yroot = self.find(y)
        if self.rank[xroot] < self.rank[yroot]:
            self.parent[xroot] = yroot
        elif self.rank[xroot] > self.rank[yroot]:
            self.parent[yroot] = xroot
        else:
            self.parent[yroot] = xroot
            self.rank[xroot] += 1

# Define graph
graph = [
    [0, 4, 0, 0, 0, 0, 0, 8, 0],
    [4, 0, 8, 0, 0, 0, 0, 11, 0],
    [0, 8, 0, 7, 0, 4, 0, 0, 2],
    [0, 0, 7, 0, 9, 14, 0, 0, 0],
    [0, 0, 0, 9, 0, 10, 0, 0, 0],
    [0, 0, 4, 14, 10, 0, 2, 0, 0],
    [0, 0, 0, 0, 0, 2, 0, 1, 6],
    [8, 11, 0, 0, 0, 0, 1, 0, 7],
    [0, 0, 2, 0, 0, 0, 6, 7, 0]
]

# Create list of all edges
edges = []
for i in range(len(graph)):
    for j in range(i + 1, len(graph)):
        if graph[i][j] != 0:
            edges.append((chr(ord('a') + i), chr(ord('a') + j), graph[i][j]))

# Sort edges by weight
edges.sort(key=lambda x: x[2])

# Create set of vertices
vertices = [chr(ord('a') + i) for i in range(len(graph))]

# Initialize Disjoint Set
ds = DisjointSet(vertices)

# Initialize MST and total weight
mst = []
total_weight = 0

# Kruskal's algorithm
for edge in edges:
    if ds.find(edge[0]) != ds.find(edge[1]):
        ds.union(edge[0], edge[1])
        mst.append(edge)
        total_weight += edge[2]

# Print result
print("Edges in Minimum Spanning Tree:")
for edge in mst:
    print(f"{edge[0]} - {edge[1]} : {edge[2]}")
print(f"Total weight of MST: {total_weight}")


[OUTPUT]

Edges in Minimum Spanning Tree:
g - h : 1
c - i : 2
f - g : 2
a - b : 4
c - f : 4
c - d : 7
a - h : 8
d - e : 9
Total weight of MST: 37
